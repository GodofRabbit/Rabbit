<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

		<!--自定义的filter-->
   <bean id="roleOrFilter" class="com.shop.shiro.CustomRolesAuthorizationFilter"> 
   </bean>
		<!--   
	   Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行  
	   Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持   
	   -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <!-- Shiro的核心安全接口，这个属性是必须的 --> 
	    <property name="securityManager" ref="securityManager"/>
	    <!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 --> 
	    <property name="loginUrl" value="/login.jsp"/>
	    <!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->  
	    <property name="successUrl" value="/index.jsp"></property>
	    <!-- 用户访问未对其授权的资源时，所显示的连接 -->  
	    <property name="unauthorizedUrl" value="/index.jsp"></property>  
	    <property name="filters">
	        <util:map>
	            <entry key="authc" value-ref="formAuthenticationFilter" />
	            <entry key="roleOrFilter" value-ref="roleOrFilter"/>
	        </util:map>
        </property>
	    <property name="filterChainDefinitions">
	        <value>
	            /logout.do = logout
	            /Front/page/balance.jsp = user
	            /Front/page/cart.jsp = user
	            /Front/page/myorder.jsp = user
	            /Front/page/orderSubmit.jsp = user
	            /Front/page/setNewPwd.jsp = user
	            /Front/page/setPwd_ok.jsp = user
	            /Front/page/verify_email.jsp = user
	            /Back/page/** = authc,roleOrFilter["admin","root"]
	            /** = anon
	        </value>
	    </property>
	    <!-- 自定义拦截器 -->
	    <!-- <property name="filters">
	        <util:map>
	            <entry key="authc" value-ref="formAuthenticationFilter"/>
	        </util:map>
	    </property> -->
	</bean>
	
	
	<!-- 缓存管理器 使用本地Ehcache实现 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
	    <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>
	</bean>
	<!-- 凭证匹配器 -->
	  <!--   <bean id="credentialsMatcher" class="com.github.zhangkaitao.shiro.chapter12.credentials.RetryLimitHashedCredentialsMatcher">
	    <constructor-arg ref="cacheManager"/>
	    <property name="hashAlgorithmName" value="md5"/>
	    <property name="hashIterations" value="2"/>
	    <property name="storedCredentialsHexEncoded" value="true"/>
	</bean> -->    
	    <!-- 会话ID生成器 -->
	     <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg value="sid"/>  
        <property name="httpOnly" value="true"/>  
        <property name="maxAge" value="-1"/>  
    </bean>  
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
        <constructor-arg value="rememberMe"/>  
        <property name="httpOnly" value="true"/>  
        <property name="maxAge" value="2592000"/><!-- 30天 -->  
	</bean>
	<!-- 会话DAO -->
	  <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
	  <!--   <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/> -->
	  <!-- 会话ID生成器  -->
	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>
	<!-- 会话验证调度器 -->
	   <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
	    <!-- 设置调度时间间隔，单位毫秒，默认就是1小时 -->
	    <!-- <property name="interval" value=""/> -->
	    <property name="sessionValidationInterval" value="1800000"/>
	    <property name="sessionManager" ref="sessionManager"/>
	</bean>
	<!-- 会话管理器 -->
	   <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
	    <!-- 设置全局会话超时时间，默认30分钟，即如果30分钟内没有访问会话将过期-->
	    <property name="globalSessionTimeout" value="1800000"/>
	    <!-- session失效后是否删除 -->
	    <!-- 默认是开启的，在会话过期后会调用SessionDAO的delete方法删除会话：如会话时持久化存储的，可以调用此方法进行删除 -->
	    <property name="deleteInvalidSessions" value="true"/>
	    <!-- 是否开启会话验证器，默认是开启的 -->
	    <property name="sessionValidationSchedulerEnabled" value="true"/>
	    <!-- 设置会话验证调度器，默认就是使用 -->
	    <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>        
	    <property name="sessionDAO" ref="sessionDAO"/>
	    <!-- 是否启用/禁用Session Id Cookie，默认是启用的；如果禁用后将不会设置Session Id Cookie， 即默认使用了Servlet容器的JSESSIONID，且通过URL重写（URL中的“;JSESSIONID=id”部分）保存Session Id -->
	    <property name="sessionIdCookieEnabled" value="true"/>
	    <!-- 会话Cookie模板 -->
	 <!--    <property name="sessionIdCookie" ref="sessionIdCookie"/> -->
	</bean>
	<!-- 自定义Realm实现 -->
	<bean id="shiroRealm" class="com.shop.shiro.ShiroRealm">
	<property name="credentialsMatcher">
    		<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    			<property name="hashAlgorithmName" value="MD5"></property>
    			<property name="hashIterations" value="1024"></property>
    		</bean>
    	</property>
    </bean>    
	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <property name="realm" ref="shiroRealm"/>
	    <property name="sessionManager" ref="sessionManager"/>
	    <property name="cacheManager" ref="cacheManager"/>
	    <property name="rememberMeManager" ref="rememberMeManager"/>
	</bean>
	<!-- rememberMe管理器 -->  
	<bean id="rememberMeManager"  class="org.apache.shiro.web.mgt.CookieRememberMeManager">  
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>  
		<property name="cookie" ref="rememberMeCookie"/>  
	</bean>
	<!-- 基于Form表单的身份验证过滤器 -->
	<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
	        <property name="usernameParam" value="account"/>
	        <property name="passwordParam" value="password"/>
	        <property name="rememberMeParam" value="rememberMe"/>
	        <property name="loginUrl" value="/login.do"/>
	</bean>  
	<!-- Shiro生命周期处理器-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
	    <property name="arguments" ref="securityManager"/>
	</bean> 
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager" />
	</bean>

</beans>

